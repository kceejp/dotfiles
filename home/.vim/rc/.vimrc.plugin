""""""""""""""""""""
" neocomplete
""""""""""""""""""""
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern          = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default'  : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme'   : $HOME.'/.gosh_completions'
      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

""""""""""""""""""""
" yanktmp.vim : enables vim to yank and paste through the multi processes
" http://www.vim.org/scripts/script.php?script_id=1598
""""""""""""""""""""
map <silent> sy :call YanktmpYank()<CR>
map <silent> sp :call YanktmpPaste_p()<CR>
map <silent> sP :call YanktmpPaste_P()<CR>

""""""""""""""""""""
" ctrlp
""""""""""""""""""""
nmap f [ctrlp]
nnoremap <silent> [ctrlp]f :<C-u>CtrlP<CR>
nnoremap <silent> [ctrlp]r :<C-u>CtrlPMRUFiles<CR>

let g:ctrlp_map                 = ''
let g:ctrlp_match_window        = 'bottom,order:ttb,min:1,max:20'
let g:ctrlp_use_migemo          =   1
let g:ctrlp_clear_cache_on_exit =   0 " 終了時キャッシュをクリアしない
let g:ctrlp_mruf_max            = 500 " MRUの最大記録数
let g:ctrlp_open_new_file       =   1 " 新規ファイル作成時にタブで開く

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_custom_ignore = {
      \ 'dir' :  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }

""""""""""""""""""""
" easymotion
""""""""""""""""""""
" ,s<word you want to find>
map <Leader> <Plug>(easymotion-prefix)

""""""""""""""""""""
" lightline
""""""""""""""""""""
let g:lightline = {
      \   'colorscheme': 'wombat',
      \   'active': {
      \     'left': [
      \         [ 'mode', 'paste' ],
      \         [ 'readonly', 'filename', 'modified' ],
      \     ],
      \   },
      \   'component': {
      \     'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
      \     'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
      \   },
      \   'component_visible_condition': {
      \     'readonly': '(&filetype!="help"&& &readonly)',
      \     'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
      \   },
      \   'separator': {
      \     'left' : '⮀',
      \     'right': '⮂',
      \   },
      \   'subseparator': {
      \     'left' : '⮁',
      \     'right': '⮃',
      \   },
      \ }

""""""""""""""""""""
" yankround.vim
""""""""""""""""""""
" yankround.vim {{{

"" キーマップ
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)

"" 履歴取得数
let g:yankround_dir = '~/.cache/yankround'
let g:yankround_max_history = 50

nnoremap <silent>g<C-p> :<C-u>CtrlPYankRound<CR>

" }}}

""""""""""""""""""""
" watchdogs.vim
""""""""""""""""""""
" 書き込み後にシンタックスチェックを行う
let g:watchdogs_check_BufWritePost_enable = 1

" filetype ごとに有効無効を設定することも出来る
let g:watchdogs_check_BufWritePost_enables = {
      \   "python" : 1,
      \   "ruby"   : 1,
      \   "php"    : 1,
      \}

" こっちは一定時間キー入力がなかった場合にシンタックスチェックを行う
" バッファに書き込み後、1度だけ行われる
let g:watchdogs_check_CursorHold_enable = 1

" filetype=python は無効になる
let g:watchdogs_check_CursorHold_enables = {
      \   "python" : 1,
      \   "ruby"   : 1,
      \   "php"    : 1,
      \}

""""""""""""""""""""
" hier.vim
""""""""""""""""""""
" Enable/disable highlighting highlighting by default:
let g:hier_enabled              = 1

let g:hier_highlight_group_qf   = 'SpellBad'
let g:hier_highlight_group_qfw  = 'SpellLocal'
let g:hier_highlight_group_qfi  = 'SpellRare'

let g:hier_highlight_group_loc  = 'SpellBad'
let g:hier_highlight_group_locw = 'SpellLocal'
let g:hier_highlight_group_loci = 'SpellRare'

if !exists("g:quickrun_config")
  let g:quickrun_config = {}
endif

let g:quickrun_config["watchdogs_checker/_"] = {
      \ "outputter/quickfix/open_cmd" : "",
      \ }
