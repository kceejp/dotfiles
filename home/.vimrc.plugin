""""""""""""""""""""
" neobundle.vim
""""""""""""""""""""
if has('vim_starting')
    set nocompatible               " Be iMproved

    " Required:
    set runtimepath+=$DOTVIM_DIR/bundle/neobundle.vim/
endif

" Required:
call neobundle#rc(expand($DOTVIM_DIR . "/bundle/"))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc', {
            \ 'build' : {
            \     'windows' : 'make -f make_mingw32.mak',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }

if has('lua')
    NeoBundleLazy 'Shougo/neocomplete', {
                \   'depends' : ['Shougo/neosnippet', 'Shougo/context_filetype.vim'],
                \   'vim_version' : '7.3.885',
                \   'autoload' : {
                \       'insert' : 1,
                \   }
                \}
else
    NeoBundleLazy 'Shougo/neocomplcache', {
                \   'depends' : ["Shougo/neosnippet"],
                \   'autoload' : {
                \       'insert' : 1,
                \   }
                \}
endif

NeoBundleLazy 'Shougo/vimfiler', {
            \   'depends' : ["Shougo/unite.vim"],
            \   'autoload' : {
            \       'commands' : [ "VimFilerTab", "VimFiler", "VimFilerExplorer", "VimFilerBufferDir" ],
            \       'mappings' : ['<Plug>(vimfiler_switch)'],
            \       'explorer' : 1,
            \   }
            \}

NeoBundleLazy 'Shougo/vimshell', {
            \ 'depends' : 'Shougo/vimproc',
            \ 'autoload' : {
            \   'commands' : [{ 'name' : 'VimShell',
            \                   'complete' : 'customlist,vimshell#complete'},
            \                 'VimShellExecute', 'VimShellInteractive',
            \                 'VimShellTerminal', 'VimShellPop'],
            \   'mappings' : ['<Plug>(vimshell_switch)']
            \ }}


NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'ujihisa/unite-colorscheme'
" NeoBundle 'ujihisa/tabpagecolorscheme'
NeoBundle 'pasela/unite-webcolorname'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 't9md/vim-unite-ack'

" Git
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'int3/vim-extradite'
NeoBundle 'gregsexton/gitv'

" Subversion
NeoBundle 'vim-scripts/svn-diff.vim'
"shows diff when commiting changes
NeoBundle 'laurentb/vim-svndiff'
" NeoBundle 'vcscommand.vim'
" NeoBundle 'svndiff'
" NeoBundle 'svndiff.vim'
" NeoBundle 'svn-diff.vim'

" Twitter
NeoBundleLazy 'basyura/TweetVim', 'dev', {
            \   'depends' : ['basyura/twibill.vim', 'tyru/open-browser.vim' ],
            \   'autoload' : {
            \       'commands' : [ "TweetVimHomeTimeline", "TweetVimSay", "TweetVimUserStream", "TweetVimUserTimeline" ]
            \   }
            \}
NeoBundle 'basyura/bitly.vim'
NeoBundle 'mattn/webapi-vim'

NeoBundle 'pbrisbin/html-template-syntax'

NeoBundle 'yanktmp.vim'
NeoBundle 'YankRing.vim'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'mbadran/headlights'

" template
" NeoBundle 'qtmplsel.vim'

NeoBundle 'Smooth-Scroll'
" NwoBundle 'simplefold'
" NeoBundle 'smartchr'
NeoBundle 'tpope/vim-surround'
" NeoBundle 'mattn/zencoding-vim.git'
NeoBundle 'vim-scripts/AutoClose--Alves'

" improved perl syntax highlighting
NeoBundle 'perl-mauke.vim'

" NeoBundle 'yoppi/perl5lib'
NeoBundle 'errormarker.vim'
" NeoBundle 'ywatase/flymake-perl.vim'
" NeoBundle 'kana/vim-flymake'

" Colorscheme
NeoBundle 'vim-scripts/Color-Sampler-Pack'
NeoBundle 'desert256.vim'
NeoBundle 'ciaranm/inkpot'
NeoBundle 'newspaper.vim'
NeoBundle 'therubymug/vim-pyte'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'tomasr/molokai'
NeoBundle 'wombat256.vim'

" Objective-C
NeoBundle 'msanders/cocoa.vim'

NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'vim-scripts/matchit.zip'
" NeoBundle 'vim-scripts/ShowMarks'
NeoBundle 'vim-scripts/SearchComplete'
NeoBundle 'godlygeek/tabular'

" NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'bling/vim-airline'

NeoBundle 'nathanaelkane/vim-indent-guides.git'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'bigfish/vim-js-beautify'

" JavaScript
NeoBundle 'teramako/jscomplete-vim'
NeoBundle 'JavaScript-syntax'
NeoBundle 'jQuery'
NeoBundle 'kchmck/vim-coffee-script'

" nginx
NeoBundle 'nginx.vim'

" markdown
NeoBundle 'tpope/vim-markdown'

" python
NeoBundle 'yuroyoro/vim-python'

filetype plugin indent on

" Installation check.
NeoBundleCheck

""""""""""""""""""""
" errormarker.vim
" http://subtech.g.hatena.ne.jp/secondlife/200807
""""""""""""""""""""
" set makeprg=$DOTVIM_DIR/bin/vimparse.pl\ -c\ %\ $*
" set errorformat=%f:%l:%m
" set shellpipe=2>&1\ >
" 
" if !exists("g:perl_flyquickfixmake")
"   let g:perl_flyquickfixmake = 1
"   autocmd BufWritePost *.pm,*.pl,*.t silent make %
" endif

""""""""""""""""""""
" neocomplcache
""""""""""""""""""""
let g:neocomplcache_temporary_dir      = $HOME . '/.vim/tmp/.neocon'

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Enable heavy features.
" Use camel case completion.
"let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
"let g:neocomplcache_enable_underbar_completion = 1

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplcache_enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplcache_enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

""""""""""""""""""""
" vcscommand.vim
""""""""""""""""""""
map <leader>di :VCSDiff<CR>

""""""""""""""""""""
" svndiff.vim
""""""""""""""""""""
noremap <F3> :call Svndiff("next")<CR>

""""""""""""""""""""
" yanktmp.vim : enables vim to yank and paste through the multi processes
" http://www.vim.org/scripts/script.php?script_id=1598
""""""""""""""""""""
map <silent> sy :call YanktmpYank()<CR>
map <silent> sp :call YanktmpPaste_p()<CR>
map <silent> sP :call YanktmpPaste_P()<CR>

""""""""""""""""""""
" unite.vim
" http://github.com/Shougo/unite.vim/blob/master/doc/unite.jax
""""""""""""""""""""
let g:unite_data_directory                 = $HOME . '/.vim/tmp/.unite' " absolute path!
let g:unite_source_file_rec_ignore_pattern = '(.git|.svn)'
let g:unite_source_file_mru_time_format    = ''
let g:unite_source_file_mru_limit          = 1000
let g:unite_source_history_yank_enable     = 1 "history/yankの有効化

" The prefix key.
nnoremap [unite] <Nop>
nmap f [unite]

nnoremap <silent> [unite]f  :<C-u>Unite tab file_rec/async<CR>
nnoremap <silent> [unite]r  :<C-u>Unite tab bookmark file_mru<CR>
nnoremap <silent> [unite]t  :<C-u>Unite tab<CR>
nnoremap <silent> [unite]c  :<C-u>Unite colorscheme -auto-preview<CR>
nnoremap <silent> [unite]cc :<C-u>Unite webcolorname<CR>
nnoremap <silent> [unite]tw :<C-u>Unite tweetvim<CR>
nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
nnoremap <silent> [unite]y  :<C-u>Unite history/yank<CR>
nnoremap <silent> [unite]h  :<C-u>Unite history/command<CR>
nnoremap <silent> [unite]s  :<C-u>Unite history/search<CR>
nnoremap <silent> [unite]a  :<C-u>Unite ack<CR>

autocmd FileType unite call s:unite_my_settings()

function! s:unite_my_settings()"{{{
  " Overwrite settings.

  call unite#custom_default_action('file', 'tabopen')

  nmap <buffer> a          <Plug>(unite_append_end)
  imap <buffer> jj         <Plug>(unite_insert_leave)

  imap <buffer> <Tab>      <Plug>(unite_do_default_action)
  imap <buffer> <S-Tab>    <Plug>(unite_insert_leave)<Plug>(unite_loop_cursor_up)

  nmap <buffer> <Tab>      <Plug>(unite_loop_cursor_down)
  nmap <buffer> <S-Tab>    <Plug>(unite_loop_cursor_up)

  nmap <buffer> <C-w>      <Plug>(unite_delete_backward_path)

  imap <buffer> <C-c>      <Plug>(unite_exit)
  nmap <buffer> <C-c>      <Plug>(unite_exit)
  imap <buffer> <C-c><C-c> <Plug>(unite_exit)
  nmap <buffer> <C-c><C-c> <Plug>(unite_exit)

  imap <buffer> <C-w>      <Plug>(unite_delete_backward_path)

  " Start insert.
  let g:unite_enable_start_insert             = 1
  let g:unite_update_time                     = 100
  let g:unite_source_file_rec_max_depth       = 5
  let g:unite_source_file_mru_filename_format = ''
  let g:unite_enable_smart_case               = 1
  let g:unite_enable_split_vertically         = 0

endfunction"}}}

""""""""""""""""""""
" qtmplsel.vim
""""""""""""""""""""
let g:qts_templatedir = "~/.vim/template"

""""""""""""""""""""
" yankring.vim
""""""""""""""""""""
let g:yankring_history_file = ".vim/tmp/yankring_history" " do not specify $HOME since it'll cause error

""""""""""""""""""""
" vimfiler
""""""""""""""""""""
map <leader>vf :VimFilerTab<CR>

let g:vimfiler_as_default_explorer = 1
let g:vimfiler_edit_action         = 'tabopen'

call vimfiler#set_execute_file('c',    'vim')
call vimfiler#set_execute_file('h',    'vim')
call vimfiler#set_execute_file('md',   'vim')
call vimfiler#set_execute_file('pm',   'vim')
call vimfiler#set_execute_file('t',    'vim')
call vimfiler#set_execute_file('css',  'vim')
call vimfiler#set_execute_file('js',   'vim')
call vimfiler#set_execute_file('vim',  'vim')
call vimfiler#set_execute_file('yaml', 'vim')
call vimfiler#set_execute_file('yml',  'vim')

""""""""""""""""""""
" zencoding
""""""""""""""""""""
" let g:user_zen_settings = {
"     \'indentation' : '    ',
"     \}

""""""""""""""""""""
" powerline
""""""""""""""""""""
let g:Powerline_symbols = 'fancy'

set guifont=Ricty_for_Powerline:h10
set guifontwide=Ricty:h10

" let g:Powerline_mode_i = '挿入'
" let g:Powerline_mode_R = '置換'
" let g:Powerline_mode_n = '通常'
" let g:Powerline_mode_v = 'ビジュアル'
" let g:Powerline_mode_V = '行ビジュアル'
" let g:Powerline_mode_cv = '矩形ビジュアル'
" let g:Powerline_mode_s = '選択'
" let g:Powerline_mode_S = '行選択'
" let g:Powerline_mode_cs = '矩形選択'

""""""""""""""""""""
" airline
""""""""""""""""""""
" let g:airline_powerline_fonts = 1

""""""""""""""""""""
" syntastic
""""""""""""""""""""

" jslint is needed!!
" npm install jslint -g

let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['php','css','coffee','html','javascript','json','less','xhtml','ruby','python','yaml'], 'passive_filetypes': ['perl'] }
let g:syntastic_enable_signs  = 1
let g:syntastic_auto_loc_list = 2

""""""""""""""""""""
" vim-indent-guides
""""""""""""""""""""

let g:indent_guides_enable_on_vim_startup  =  1 "vim立ち上げ時に自動的にvim-indent-guidesをオンにする
let g:indent_guides_auto_colors            =  0 "autoにするとよく見えなかったので自動的に色付けするのはストップ
let g:indent_guides_color_change_percent   = 10 "色の変化の幅（？）。パーセンテージらしい
let g:indent_guides_guide_size             =  1 "インデントの色付け幅

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgray guibg=black    "インデントの色
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=grey     guibg=darkgrey "二段階目のインデントの色

""""""""""""""""""""
" tweetvim
""""""""""""""""""""

let g:tweetvim_tweet_per_page = 60
nnoremap <silent><Leader>ts :<C-u>TweetVimSay<CR>
nnoremap <silent><Leader>tw :<C-u>split <Bar> TweetVimHomeTimeline<CR>
nnoremap <silent><Leader>tm :<C-u>split <Bar> TweetVimMentions<CR>

""""""""""""""""""""
" gundo
""""""""""""""""""""
nnoremap U :GundoToggle<CR>
