" プラグインが実際にインストールされるディレクトリ
let s:dein_dir = expand('~/.cache/dein')
" dein.vim 本体
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" 設定開始
call dein#begin(s:dein_dir)

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " 管理するプラグインを記述したファイル
  let s:toml      = '~/.vim/rc/dein.toml'
  let s:lazy_toml = '~/.vim/rc/dein_lazy.toml'
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  call dein#end()
  call dein#save_state()
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
  call dein#install()
endif

" Required:
filetype plugin indent on

""""""""""""""""""""
" errormarker.vim
" http://subtech.g.hatena.ne.jp/secondlife/200807
""""""""""""""""""""
" set makeprg=$DOTVIM_DIR/bin/vimparse.pl\ -c\ %\ $*
" set errorformat=%f:%l:%m
" set shellpipe=2>&1\ >
"
" if !exists("g:perl_flyquickfixmake")
"   let g:perl_flyquickfixmake = 1
"   autocmd BufWritePost *.pm,*.pl,*.t silent make %
" endif

""""""""""""""""""""
" neocomplete
""""""""""""""""""""
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

""""""""""""""""""""
" vcscommand.vim
""""""""""""""""""""
map <leader>di :VCSDiff<CR>

""""""""""""""""""""
" svndiff.vim
""""""""""""""""""""
noremap <F3> :call Svndiff("next")<CR>

""""""""""""""""""""
" yanktmp.vim : enables vim to yank and paste through the multi processes
" http://www.vim.org/scripts/script.php?script_id=1598
""""""""""""""""""""
map <silent> sy :call YanktmpYank()<CR>
map <silent> sp :call YanktmpPaste_p()<CR>
map <silent> sP :call YanktmpPaste_P()<CR>

""""""""""""""""""""
" unite.vim
" http://github.com/Shougo/unite.vim/blob/master/doc/unite.jax
""""""""""""""""""""
" let g:unite_data_directory                 = $HOME . '/.vim/tmp/.unite' " absolute path!
" let g:unite_source_file_rec_ignore_pattern = '(.git|.svn|.cache|.sass-cache)'
" let g:unite_source_file_mru_time_format    = ''
" let g:unite_source_file_mru_limit          = 1000
" let g:unite_source_history_yank_enable     = 1 "history/yankの有効化
"
" " The prefix key.
" nnoremap [unite] <Nop>
" nmap f [unite]
"
" nnoremap <silent> [unite]f  :<C-u>Unite tab file_rec/async<CR>
" nnoremap <silent> [unite]r  :<C-u>Unite tab bookmark file_mru<CR>
" nnoremap <silent> [unite]t  :<C-u>Unite tab<CR>
" nnoremap <silent> [unite]c  :<C-u>Unite colorscheme -auto-preview<CR>
" nnoremap <silent> [unite]cc :<C-u>Unite webcolorname<CR>
" nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
" nnoremap <silent> [unite]y  :<C-u>Unite history/yank<CR>
" nnoremap <silent> [unite]h  :<C-u>Unite history/command<CR>
" nnoremap <silent> [unite]s  :<C-u>Unite history/search<CR>
" nnoremap <silent> [unite]a  :<C-u>Unite ack<CR>
"
" autocmd FileType unite call s:unite_my_settings()
"
" function! s:unite_my_settings()"{{{
"   " Overwrite settings.
"
"   call unite#custom_default_action('file', 'tabopen')
"
"   nmap <buffer> a          <Plug>(unite_append_end)
"   imap <buffer> jj         <Plug>(unite_insert_leave)
"
"   imap <buffer> <Tab>      <Plug>(unite_do_default_action)
"   imap <buffer> <S-Tab>    <Plug>(unite_insert_leave)<Plug>(unite_loop_cursor_up)
"
"   nmap <buffer> <Tab>      <Plug>(unite_loop_cursor_down)
"   nmap <buffer> <S-Tab>    <Plug>(unite_loop_cursor_up)
"
"   nmap <buffer> <C-w>      <Plug>(unite_delete_backward_path)
"
"   imap <buffer> <C-c>      <Plug>(unite_exit)
"   nmap <buffer> <C-c>      <Plug>(unite_exit)
"   imap <buffer> <C-c><C-c> <Plug>(unite_exit)
"   nmap <buffer> <C-c><C-c> <Plug>(unite_exit)
"
"   imap <buffer> <C-w>      <Plug>(unite_delete_backward_path)
"
"   " Start insert.
"   let g:unite_enable_start_insert             = 1
"   let g:unite_update_time                     = 100
"   let g:unite_source_file_rec_max_depth       = 5
"   let g:unite_source_file_mru_filename_format = ''
"   let g:unite_enable_smart_case               = 1
"   let g:unite_enable_split_vertically         = 0
"
" endfunction"}}}

""""""""""""""""""""
" qtmplsel.vim
""""""""""""""""""""
let g:qts_templatedir = "~/.vim/template"

""""""""""""""""""""
" yankring.vim
""""""""""""""""""""
let g:yankring_history_file = ".vim/tmp/yankring_history" " do not specify $HOME since it'll cause error

""""""""""""""""""""
" zencoding
""""""""""""""""""""
" let g:user_zen_settings = {
"     \'indentation' : '    ',
"     \}

""""""""""""""""""""
" syntastic
""""""""""""""""""""

" jslint is needed!!
" npm install jslint -g

let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['php','css','coffee','html','javascript','json','less','xhtml','ruby','python','yaml'], 'passive_filetypes': ['perl'] }
let g:syntastic_enable_signs  = 1
let g:syntastic_auto_loc_list = 2

""""""""""""""""""""
" vim-indent-guides
""""""""""""""""""""

let g:indent_guides_enable_on_vim_startup  =  1 "vim立ち上げ時に自動的にvim-indent-guidesをオンにする
let g:indent_guides_auto_colors            =  0 "autoにするとよく見えなかったので自動的に色付けするのはストップ
let g:indent_guides_color_change_percent   = 10 "色の変化の幅（？）。パーセンテージらしい
let g:indent_guides_guide_size             =  1 "インデントの色付け幅

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=darkgray guibg=black    "インデントの色
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=grey     guibg=darkgrey "二段階目のインデントの色

""""""""""""""""""""
" gundo
""""""""""""""""""""
nnoremap U :GundoToggle<CR>

""""""""""""""""""""
" ctrlp
""""""""""""""""""""
nmap f [ctrlp]
nnoremap <silent> [ctrlp]f :<C-u>CtrlP<CR>
nnoremap <silent> [ctrlp]r :<C-u>CtrlPMRUFiles<CR>
let g:ctrlp_match_window        = 'bottom,order:ttb,min:1,max:20'
let g:ctrlp_use_migemo          = 1
let g:ctrlp_clear_cache_on_exit = 0 " 終了時キャッシュをクリアしない
let g:ctrlp_mruf_max            = 500 " MRUの最大記録数
let g:ctrlp_open_new_file       = 1 " 新規ファイル作成時にタブで開く

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

""""""""""""""""""""
" easymotion
""""""""""""""""""""
" ,s<word you want to find>
map <Leader> <Plug>(easymotion-prefix)

""""""""""""""""""""
" lightline
""""""""""""""""""""
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
      \ }
